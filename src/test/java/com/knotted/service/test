"C:\Program Files\Java\jdk-17.0.2\bin\java.exe" -XX:TieredStopAtLevel=1 -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true "-Dmanagement.endpoints.jmx.exposure.include=*" -javaagent:E:\jungmin\util\ideaIU-2023.1.1.win\lib\idea_rt.jar=57291:E:\jungmin\util\ideaIU-2023.1.1.win\bin -Dfile.encoding=UTF-8 -classpath E:\jungmin\work\knotted\target\classes;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.0.6\spring-boot-starter-data-jpa-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.0.6\spring-boot-starter-aop-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\aspectj\aspectjweaver\1.9.19\aspectjweaver-1.9.19.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.0.6\spring-boot-starter-jdbc-3.0.6.jar;C:\Users\Administrator\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-jdbc\6.0.8\spring-jdbc-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\hibernate\orm\hibernate-core\6.1.7.Final\hibernate-core-6.1.7.Final.jar;C:\Users\Administrator\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Administrator\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Administrator\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\Administrator\.m2\repository\org\jboss\jandex\2.4.2.Final\jandex-2.4.2.Final.jar;C:\Users\Administrator\.m2\repository\net\bytebuddy\byte-buddy\1.12.23\byte-buddy-1.12.23.jar;C:\Users\Administrator\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\Administrator\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\Administrator\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\Administrator\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\Administrator\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.0\jakarta.inject-api-2.0.0.jar;C:\Users\Administrator\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\Administrator\.m2\repository\org\springframework\data\spring-data-jpa\3.0.5\spring-data-jpa-3.0.5.jar;C:\Users\Administrator\.m2\repository\org\springframework\data\spring-data-commons\3.0.5\spring-data-commons-3.0.5.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-orm\6.0.8\spring-orm-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-context\6.0.8\spring-context-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-tx\6.0.8\spring-tx-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-beans\6.0.8\spring-beans-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-aspects\6.0.8\spring-aspects-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.0.6\spring-boot-starter-security-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter\3.0.6\spring-boot-starter-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.0.6\spring-boot-starter-logging-3.0.6.jar;C:\Users\Administrator\.m2\repository\ch\qos\logback\logback-classic\1.4.7\logback-classic-1.4.7.jar;C:\Users\Administrator\.m2\repository\ch\qos\logback\logback-core\1.4.7\logback-core-1.4.7.jar;C:\Users\Administrator\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.19.0\log4j-to-slf4j-2.19.0.jar;C:\Users\Administrator\.m2\repository\org\apache\logging\log4j\log4j-api\2.19.0\log4j-api-2.19.0.jar;C:\Users\Administrator\.m2\repository\org\slf4j\jul-to-slf4j\2.0.7\jul-to-slf4j-2.0.7.jar;C:\Users\Administrator\.m2\repository\org\yaml\snakeyaml\1.33\snakeyaml-1.33.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-aop\6.0.8\spring-aop-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\security\spring-security-config\6.0.3\spring-security-config-6.0.3.jar;C:\Users\Administrator\.m2\repository\org\springframework\security\spring-security-web\6.0.3\spring-security-web-6.0.3.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-expression\6.0.8\spring-expression-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-thymeleaf\3.0.6\spring-boot-starter-thymeleaf-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\thymeleaf\thymeleaf-spring6\3.1.1.RELEASE\thymeleaf-spring6-3.1.1.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.0.6\spring-boot-starter-web-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.0.6\spring-boot-starter-json-3.0.6.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.14.2\jackson-databind-2.14.2.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.14.2\jackson-annotations-2.14.2.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.14.2\jackson-core-2.14.2.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.14.2\jackson-datatype-jdk8-2.14.2.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.14.2\jackson-datatype-jsr310-2.14.2.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.14.2\jackson-module-parameter-names-2.14.2.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-web\6.0.8\spring-web-6.0.8.jar;C:\Users\Administrator\.m2\repository\io\micrometer\micrometer-observation\1.10.6\micrometer-observation-1.10.6.jar;C:\Users\Administrator\.m2\repository\io\micrometer\micrometer-commons\1.10.6\micrometer-commons-1.10.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-webmvc\6.0.8\spring-webmvc-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-web-services\3.0.6\spring-boot-starter-web-services-3.0.6.jar;C:\Users\Administrator\.m2\repository\com\sun\xml\messaging\saaj\saaj-impl\3.0.1\saaj-impl-3.0.1.jar;C:\Users\Administrator\.m2\repository\jakarta\xml\soap\jakarta.xml.soap-api\3.0.0\jakarta.xml.soap-api-3.0.0.jar;C:\Users\Administrator\.m2\repository\org\jvnet\staxex\stax-ex\2.1.0\stax-ex-2.1.0.jar;C:\Users\Administrator\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.1\jakarta.activation-api-2.1.1.jar;C:\Users\Administrator\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\Administrator\.m2\repository\jakarta\xml\ws\jakarta.xml.ws-api\4.0.0\jakarta.xml.ws-api-4.0.0.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-oxm\6.0.8\spring-oxm-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\ws\spring-ws-core\4.0.3\spring-ws-core-4.0.3.jar;C:\Users\Administrator\.m2\repository\org\springframework\ws\spring-xml\4.0.3\spring-xml-4.0.3.jar;C:\Users\Administrator\.m2\repository\org\thymeleaf\extras\thymeleaf-extras-springsecurity6\3.1.1.RELEASE\thymeleaf-extras-springsecurity6-3.1.1.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\slf4j\slf4j-api\2.0.7\slf4j-api-2.0.7.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-devtools\3.0.6\spring-boot-devtools-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot\3.0.6\spring-boot-3.0.6.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.0.6\spring-boot-autoconfigure-3.0.6.jar;C:\Users\Administrator\.m2\repository\com\h2database\h2\2.1.214\h2-2.1.214.jar;C:\Users\Administrator\.m2\repository\org\mariadb\jdbc\mariadb-java-client\3.0.10\mariadb-java-client-3.0.10.jar;C:\Users\Administrator\.m2\repository\org\projectlombok\lombok\1.18.26\lombok-1.18.26.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.0.6\spring-boot-starter-tomcat-3.0.6.jar;C:\Users\Administrator\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.8\tomcat-embed-core-10.1.8.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.8\tomcat-embed-el-10.1.8.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.8\tomcat-embed-websocket-10.1.8.jar;C:\Users\Administrator\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-core\6.0.8\spring-core-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-jcl\6.0.8\spring-jcl-6.0.8.jar;C:\Users\Administrator\.m2\repository\org\springframework\security\spring-security-core\6.0.3\spring-security-core-6.0.3.jar;C:\Users\Administrator\.m2\repository\org\springframework\security\spring-security-crypto\6.0.3\spring-security-crypto-6.0.3.jar;C:\Users\Administrator\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Administrator\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.0.Final\hibernate-validator-8.0.0.Final.jar;C:\Users\Administrator\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Administrator\.m2\repository\nz\net\ultraq\thymeleaf\thymeleaf-layout-dialect\3.1.0\thymeleaf-layout-dialect-3.1.0.jar;C:\Users\Administrator\.m2\repository\org\apache\groovy\groovy\4.0.11\groovy-4.0.11.jar;C:\Users\Administrator\.m2\repository\nz\net\ultraq\groovy\groovy-extensions\2.0.0\groovy-extensions-2.0.0.jar;C:\Users\Administrator\.m2\repository\nz\net\ultraq\thymeleaf\thymeleaf-expression-processor\3.1.0\thymeleaf-expression-processor-3.1.0.jar;C:\Users\Administrator\.m2\repository\org\thymeleaf\thymeleaf\3.1.1.RELEASE\thymeleaf-3.1.1.RELEASE.jar;C:\Users\Administrator\.m2\repository\ognl\ognl\3.3.4\ognl-3.3.4.jar;C:\Users\Administrator\.m2\repository\org\javassist\javassist\3.29.0-GA\javassist-3.29.0-GA.jar;C:\Users\Administrator\.m2\repository\org\attoparser\attoparser\2.0.6.RELEASE\attoparser-2.0.6.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\unbescape\unbescape\1.1.6.RELEASE\unbescape-1.1.6.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\modelmapper\modelmapper\3.1.1\modelmapper-3.1.1.jar com.knotted.KnottedApplication

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.0.6)

2023-05-18T17:42:39.134+09:00  INFO 10568 --- [  restartedMain] com.knotted.KnottedApplication           : Starting KnottedApplication using Java 17.0.2 with PID 10568 (E:\jungmin\work\knotted\target\classes started by Administrator in E:\jungmin\work\knotted)
2023-05-18T17:42:39.136+09:00  INFO 10568 --- [  restartedMain] com.knotted.KnottedApplication           : No active profile set, falling back to 1 default profile: "default"
2023-05-18T17:42:39.259+09:00  INFO 10568 --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-05-18T17:42:39.259+09:00  INFO 10568 --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-05-18T17:42:39.585+09:00  INFO 10568 --- [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-05-18T17:42:39.635+09:00  INFO 10568 --- [  restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 45 ms. Found 18 JPA repository interfaces.
2023-05-18T17:42:39.802+09:00  INFO 10568 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-18T17:42:39.820+09:00  INFO 10568 --- [  restartedMain] .w.s.a.s.AnnotationActionEndpointMapping : Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2023-05-18T17:42:39.977+09:00  INFO 10568 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2023-05-18T17:42:39.982+09:00  INFO 10568 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-05-18T17:42:39.982+09:00  INFO 10568 --- [  restartedMain] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.8]
2023-05-18T17:42:40.018+09:00  INFO 10568 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-05-18T17:42:40.019+09:00  INFO 10568 --- [  restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 760 ms
2023-05-18T17:42:40.041+09:00  INFO 10568 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-05-18T17:42:40.087+09:00  INFO 10568 --- [  restartedMain] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.mariadb.jdbc.Connection@4d5f92bc
2023-05-18T17:42:40.088+09:00  INFO 10568 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2023-05-18T17:42:40.098+09:00  INFO 10568 --- [  restartedMain] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:mariadb://localhost:10000/knotted?user=root&password=***'
2023-05-18T17:42:40.173+09:00  INFO 10568 --- [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-05-18T17:42:40.194+09:00  INFO 10568 --- [  restartedMain] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.1.7.Final
2023-05-18T17:42:40.361+09:00  INFO 10568 --- [  restartedMain] SQL dialect                              : HHH000400: Using dialect: org.hibernate.dialect.MariaDB10Dialect
2023-05-18T17:42:40.362+09:00  WARN 10568 --- [  restartedMain] org.hibernate.orm.deprecation            : HHH90000026: MariaDB10Dialect has been deprecated; use org.hibernate.dialect.MariaDBDialect instead
2023-05-18T17:42:40.375+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5edaaa0d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c1fbb81)
2023-05-18T17:42:40.375+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f86046d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17de5a0)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@afcbd40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3b8edc2d)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6474125d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@a4aab96)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@65330122) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2811d61d)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6c33cfb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@337adfb3)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ebde2ef) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@68ba741b)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1a8628bb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7f64fb1f)
2023-05-18T17:42:40.376+09:00 DEBUG 10568 --- [  restartedMain] o.h.t.d.sql.spi.DdlTypeRegistry          : addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5e6fd486) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@654e69fc)
2023-05-18T17:42:40.921+09:00  INFO 10568 --- [  restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-18T17:42:40.925+09:00  INFO 10568 --- [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-05-18T17:42:41.325+09:00  WARN 10568 --- [  restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-05-18T17:42:41.399+09:00  INFO 10568 --- [  restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2023-05-18T17:42:41.483+09:00  INFO 10568 --- [  restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@543c85d7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@363f22a, org.springframework.security.web.context.SecurityContextHolderFilter@2910e1c1, org.springframework.security.web.header.HeaderWriterFilter@3852465a, org.springframework.security.web.csrf.CsrfFilter@4120c036, org.springframework.security.web.authentication.logout.LogoutFilter@476ad620, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4f1a884, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5f61795c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7e874072, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a668d94, org.springframework.security.web.access.ExceptionTranslationFilter@70c22ca4, org.springframework.security.web.access.intercept.AuthorizationFilter@73e48d8f]
2023-05-18T17:42:41.675+09:00  INFO 10568 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2023-05-18T17:42:41.695+09:00  INFO 10568 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2023-05-18T17:42:41.701+09:00  INFO 10568 --- [  restartedMain] com.knotted.KnottedApplication           : Started KnottedApplication in 2.761 seconds (process running for 3.102)
2023-05-18T17:44:32.601+09:00  INFO 10568 --- [nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-05-18T17:44:32.601+09:00  INFO 10568 --- [nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2023-05-18T17:44:32.602+09:00  INFO 10568 --- [nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        s1_0.store_id,
        s1_0.store_address,
        s1_0.store_close_time,
        s1_0.store_description,
        s1_0.store_name,
        s1_0.store_open_time,
        s1_0.store_phone_number,
        s1_0.store_postcode,
        s1_0.reg_date,
        s1_0.update_date
    from
        store s1_0
    where
        s1_0.store_id=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.store_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        c1_0.cart_item_id,
        c1_0.cart_id,
        c1_0.item_count,
        c1_0.item_id,
        c1_0.reg_date,
        c1_0.update_date
    from
        cart_item c1_0
    where
        c1_0.cart_id=?
Hibernate:
    select
        i1_0.item_id,
        i1_0.item_allergy,
        i1_0.item_category,
        i1_0.item_description,
        i1_0.item_name,
        i1_0.item_name_eng,
        i1_0.item_origin,
        i1_0.item_price,
        i1_0.reg_date,
        i1_0.item_sale_count,
        i1_0.update_date
    from
        item i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        i1_0.item_image_id,
        i1_0.image_name,
        i1_0.image_url,
        i1_0.item_id,
        i1_0.original_image_name,
        i1_0.reg_date,
        i1_0.update_date
    from
        item_image i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        s1_0.store_item_id,
        s1_0.item_id,
        s1_0.reg_date,
        s1_0.item_stock,
        s1_0.store_id,
        s1_0.update_date
    from
        store_item s1_0
    where
        s1_0.store_id=?
        and s1_0.item_id=?
2023-05-18T17:44:33.212+09:00  WARN 10568 --- [nio-8888-exec-1] n.n.u.t.l.fragments.FragmentProcessor    : You don't need to put the layout:fragment/data-layout-fragment attribute into the <head> section - the decoration process will automatically copy the <head> section of your content templates into your layout page.
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        s1_0.store_id,
        s1_0.store_address,
        s1_0.store_close_time,
        s1_0.store_description,
        s1_0.store_name,
        s1_0.store_open_time,
        s1_0.store_phone_number,
        s1_0.store_postcode,
        s1_0.reg_date,
        s1_0.update_date
    from
        store s1_0
    where
        s1_0.store_id=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.store_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        c1_0.cart_item_id,
        c1_0.cart_id,
        c1_0.item_count,
        c1_0.item_id,
        c1_0.reg_date,
        c1_0.update_date
    from
        cart_item c1_0
    where
        c1_0.cart_id=?
Hibernate:
    select
        i1_0.item_id,
        i1_0.item_allergy,
        i1_0.item_category,
        i1_0.item_description,
        i1_0.item_name,
        i1_0.item_name_eng,
        i1_0.item_origin,
        i1_0.item_price,
        i1_0.reg_date,
        i1_0.item_sale_count,
        i1_0.update_date
    from
        item i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        i1_0.item_image_id,
        i1_0.image_name,
        i1_0.image_url,
        i1_0.item_id,
        i1_0.original_image_name,
        i1_0.reg_date,
        i1_0.update_date
    from
        item_image i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        s1_0.store_item_id,
        s1_0.item_id,
        s1_0.reg_date,
        s1_0.item_stock,
        s1_0.store_id,
        s1_0.update_date
    from
        store_item s1_0
    where
        s1_0.store_id=?
        and s1_0.item_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        s1_0.store_id,
        s1_0.store_address,
        s1_0.store_close_time,
        s1_0.store_description,
        s1_0.store_name,
        s1_0.store_open_time,
        s1_0.store_phone_number,
        s1_0.store_postcode,
        s1_0.reg_date,
        s1_0.update_date
    from
        store s1_0
    where
        s1_0.store_id=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.store_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        c1_0.cart_item_id,
        c1_0.cart_id,
        c1_0.item_count,
        c1_0.item_id,
        c1_0.reg_date,
        c1_0.update_date
    from
        cart_item c1_0
    where
        c1_0.cart_id=?
Hibernate:
    select
        i1_0.item_id,
        i1_0.item_allergy,
        i1_0.item_category,
        i1_0.item_description,
        i1_0.item_name,
        i1_0.item_name_eng,
        i1_0.item_origin,
        i1_0.item_price,
        i1_0.reg_date,
        i1_0.item_sale_count,
        i1_0.update_date
    from
        item i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        i1_0.item_image_id,
        i1_0.image_name,
        i1_0.image_url,
        i1_0.item_id,
        i1_0.original_image_name,
        i1_0.reg_date,
        i1_0.update_date
    from
        item_image i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        s1_0.store_item_id,
        s1_0.item_id,
        s1_0.reg_date,
        s1_0.item_stock,
        s1_0.store_id,
        s1_0.update_date
    from
        store_item s1_0
    where
        s1_0.store_id=?
        and s1_0.item_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        s1_0.store_id,
        s1_0.store_address,
        s1_0.store_close_time,
        s1_0.store_description,
        s1_0.store_name,
        s1_0.store_open_time,
        s1_0.store_phone_number,
        s1_0.store_postcode,
        s1_0.reg_date,
        s1_0.update_date
    from
        store s1_0
    where
        s1_0.store_id=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.store_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        c1_0.cart_item_id,
        c1_0.cart_id,
        c1_0.item_count,
        c1_0.item_id,
        c1_0.reg_date,
        c1_0.update_date
    from
        cart_item c1_0
    where
        c1_0.cart_id=?
Hibernate:
    select
        i1_0.item_id,
        i1_0.item_allergy,
        i1_0.item_category,
        i1_0.item_description,
        i1_0.item_name,
        i1_0.item_name_eng,
        i1_0.item_origin,
        i1_0.item_price,
        i1_0.reg_date,
        i1_0.item_sale_count,
        i1_0.update_date
    from
        item i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        i1_0.item_image_id,
        i1_0.image_name,
        i1_0.image_url,
        i1_0.item_id,
        i1_0.original_image_name,
        i1_0.reg_date,
        i1_0.update_date
    from
        item_image i1_0
    where
        i1_0.item_id=?
Hibernate:
    select
        s1_0.store_item_id,
        s1_0.item_id,
        s1_0.reg_date,
        s1_0.item_stock,
        s1_0.store_id,
        s1_0.update_date
    from
        store_item s1_0
    where
        s1_0.store_id=?
        and s1_0.item_id=?
Hibernate:
    select
        s1_0.store_item_id,
        s1_0.item_id,
        s1_0.reg_date,
        s1_0.item_stock,
        s1_0.store_id,
        s1_0.update_date
    from
        store_item s1_0
    where
        s1_0.store_id=?
        and s1_0.item_id=?
Hibernate:
    select
        next_val as id_val
    from
        order_seq for update
Hibernate:
    update
        order_seq
    set
        next_val= ?
    where
        next_val=?
Hibernate:
    select
        next_val as id_val
    from
        order_item_seq for update
Hibernate:
    update
        order_item_seq
    set
        next_val= ?
    where
        next_val=?
Hibernate:
    insert
    into
        `

    order` (
        member_id, order_price, order_status, paper_bag_used, reg_date, reserve_date, store_id, update_date, order_id
    )
values
    (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate:
    insert
    into
        order_item
        (item_count, item_id, item_name, order_id, item_price, reg_date, update_date, order_item_id)
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate:
    update
        member
    set
        member_address=?,
        member_email=?,
        member_role=?,
        member_name=?,
        member_password=?,
        member_postcode=?,
        member_purchase=?,
        member_reward=?,
        update_date=?
    where
        member_id=?
Hibernate:
    update
        item
    set
        item_allergy=?,
        item_category=?,
        item_description=?,
        item_name=?,
        item_name_eng=?,
        item_origin=?,
        item_price=?,
        item_sale_count=?,
        update_date=?
    where
        item_id=?
Hibernate:
    update
        store_item
    set
        item_id=?,
        item_stock=?,
        store_id=?,
        update_date=?
    where
        store_item_id=?
Hibernate:
    select
        m1_0.member_id,
        m1_0.member_address,
        m1_0.member_email,
        m1_0.member_role,
        m1_0.member_name,
        m1_0.member_password,
        m1_0.member_postcode,
        m1_0.member_purchase,
        m1_0.reg_date,
        m1_0.member_reward,
        m1_0.update_date
    from
        member m1_0
    where
        m1_0.member_email=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.member_id,
        c1_0.reg_date,
        c1_0.reserve_date,
        c1_0.store_id,
        c1_0.update_date
    from
        cart c1_0
    where
        c1_0.member_id=?
Hibernate:
    select
        c1_0.cart_id,
        c1_0.cart_item_id,
        c1_0.item_count,
        c1_0.item_id,
        c1_0.reg_date,
        c1_0.update_date
    from
        cart_item c1_0
    where
        c1_0.cart_id=?
